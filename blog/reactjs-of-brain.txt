3:I[2110,[],""]
5:I[4718,[],""]
6:I[5460,["443","static/chunks/443-3edd3aec43f9c5a3.js","18","static/chunks/18-2f33c2b2a14eabeb.js","185","static/chunks/app/layout-cde2c133be2f57ba.js"],"Providers"]
7:I[6443,["443","static/chunks/443-3edd3aec43f9c5a3.js","18","static/chunks/18-2f33c2b2a14eabeb.js","308","static/chunks/app/blog/%5Bslug%5D/page-5363093e18d10e1d.js"],""]
8:I[5152,["443","static/chunks/443-3edd3aec43f9c5a3.js","18","static/chunks/18-2f33c2b2a14eabeb.js","185","static/chunks/app/layout-cde2c133be2f57ba.js"],"default"]
9:I[9184,["443","static/chunks/443-3edd3aec43f9c5a3.js","18","static/chunks/18-2f33c2b2a14eabeb.js","185","static/chunks/app/layout-cde2c133be2f57ba.js"],""]
4:["slug","reactjs-of-brain","d"]
0:["BtwspGh4qCa_urMThcm2V",[[["",{"children":["blog",{"children":[["slug","reactjs-of-brain","d"],{"children":["__PAGE__?{\"slug\":\"reactjs-of-brain\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["blog",{"children":[["slug","reactjs-of-brain","d"],{"children":["__PAGE__",{},[["$L1",["$","section",null,{"children":[["$","script",null,{"type":"application/ld+json","suppressHydrationWarning":true,"dangerouslySetInnerHTML":{"__html":"{\"@context\":\"https://schema.org\",\"@type\":\"BlogPosting\",\"headline\":\"Реакт головного мозга\",\"datePublished\":\"2024-02-21\",\"dateModified\":\"2024-02-21\",\"description\":\"'Всегда слышал выражение «Java-головного мозга». Так называли\",\"image\":\"/og?title=%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%20%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BC%D0%BE%D0%B7%D0%B3%D0%B0\",\"url\":\"https:/localhost/blog/reactjs-of-brain\",\"author\":{\"@type\":\"Person\",\"name\":\"My Portfolio\"}}"}}],["$","h1",null,{"className":"title font-semibold text-2xl tracking-tighter","children":"Реакт головного мозга"}],["$","div",null,{"className":"flex justify-between items-center mt-2 mb-8 text-sm","children":["$","p",null,{"className":"text-sm text-neutral-600 dark:text-neutral-400","children":"21 февраля 2024 г."}]}],["$","article",null,{"className":"prose","children":"$L2"}]]}],null],null],null]},[[null,["$","div",null,{"className":"mx-auto prose prose-headings:mt-8 prose-headings:font-semibold prose-headings:text-black prose-h1:text-5xl prose-h2:text-4xl prose-h3:text-3xl prose-h4:text-2xl prose-h5:text-xl prose-h6:text-lg dark:prose-headings:text-white","children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","blog","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/239d5f595adc3ed0.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ru","suppressHydrationWarning":true,"className":"__variable_3a0388 __variable_c1e5c9","children":["$","body",null,{"className":"antialiased mx-auto max-w-screen-xl px-5 xs:text-[16px] md:text-[18px]","children":["$","$L6",null,{"children":[["$","div",null,{"className":"sticky top-0 z-40 w-full backdrop-blur flex-none lg:z-50 lg:border-b lg:border-slate-900/10 dark:border-slate-50/[0.06] bg-white/95 supports-backdrop-blur:bg-white/60 dark:bg-transparent","children":["$","div",null,{"className":"max-w-8xl mx-auto","children":["$","div",null,{"className":"py-4 border-b border-slate-900/10 lg:px-8 lg:border-0 dark:border-slate-300/10 mx-4 lg:mx-0","children":["$","div",null,{"className":"relative flex items-center","children":[["$","$L7",null,{"className":"title font-semibold text-1xl tracking-tighter","href":"/","children":"PEROV.DEV"}],["$","div",null,{"className":"relative lg:flex items-center ml-auto","children":[["$","nav",null,{"className":"text-sm leading-6 hidden lg:flex font-semibold text-slate-700 dark:text-slate-200","children":["$","ul",null,{"className":"flex space-x-8","children":[["$","li",null,{"children":["$","$L7",null,{"href":"/#about","className":"hover:text-sky-500 dark:hover:text-sky-400","children":"Обо мне"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"#experience","className":"hover:text-sky-500 dark:hover:text-sky-400","children":"Опыт"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"#projects","className":"hover:text-sky-500 dark:hover:text-sky-400","children":"Проекты"}]}],["$","li",null,{"children":["$","$L7",null,{"href":"#lastArticles","className":"hover:text-sky-500 dark:hover:text-sky-400","children":"Блог"}]}],["$","li",null,{"children":["$","$L7",null,{"className":"hover:text-sky-500 dark:hover:text-sky-400","href":"#contactUs","children":"Контакты"}]}]]}]}],["$","div",null,{"className":"flex items-center ml-6","children":[["$","$L8",null,{}],["$","a",null,{"href":"https://github.com/per0w","target":"blank","className":"ml-6 block  hover:text-slate-500 dark:hover:text-slate-300","children":[["$","span",null,{"className":"sr-only","children":"perov githubs"}],["$","svg",null,{"viewBox":"0 0 16 16","className":"w-5 h-5","fill":"currentColor","aria-hidden":"true","children":["$","path",null,{"d":"M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0016 8c0-4.42-3.58-8-8-8z"}]}]]}],["$","a",null,{"href":"https://t.me/per0w/","target":"blank","className":"ml-6 block  hover:text-slate-500 dark:hover:text-slate-300","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","className":"w-5 h-5","viewBox":"0 0 256 256","fill":"currentColor","children":[["$","defs",null,{"children":["$","linearGradient",null,{"id":"logosTelegram0","x1":"50%","x2":"50%","y1":"0%","y2":"100%","children":[["$","stop",null,{"offset":"0%","stopColor":"#2aabee"}],["$","stop",null,{"offset":"100%","stopColor":"#229ed9"}]]}]}],["$","path",null,{"fill":"url(#logosTelegram0)","d":"M128 0C94.06 0 61.48 13.494 37.5 37.49A128.04 128.04 0 0 0 0 128c0 33.934 13.5 66.514 37.5 90.51C61.48 242.506 94.06 256 128 256s66.52-13.494 90.5-37.49c24-23.996 37.5-56.576 37.5-90.51s-13.5-66.514-37.5-90.51C194.52 13.494 161.94 0 128 0"}],["$","path",null,{"fill":"#fff","d":"M57.94 126.648q55.98-24.384 74.64-32.152c35.56-14.786 42.94-17.354 47.76-17.441c1.06-.017 3.42.245 4.96 1.49c1.28 1.05 1.64 2.47 1.82 3.467c.16.996.38 3.266.2 5.038c-1.92 20.24-10.26 69.356-14.5 92.026c-1.78 9.592-5.32 12.808-8.74 13.122c-7.44.684-13.08-4.912-20.28-9.63c-11.26-7.386-17.62-11.982-28.56-19.188c-12.64-8.328-4.44-12.906 2.76-20.386c1.88-1.958 34.64-31.748 35.26-34.45c.08-.338.16-1.598-.6-2.262c-.74-.666-1.84-.438-2.64-.258c-1.14.256-19.12 12.152-54 35.686c-5.1 3.508-9.72 5.218-13.88 5.128c-4.56-.098-13.36-2.584-19.9-4.708c-8-2.606-14.38-3.984-13.82-8.41c.28-2.304 3.46-4.662 9.52-7.072"}]]}]}]]}]]}],["$","div",null,{"className":"ml-2 -my-1 lg:hidden","children":["$","button",null,{"type":"button","className":"text-slate-500 w-8 h-8 flex items-center justify-center hover:text-slate-600 dark:text-slate-400 dark:hover:text-slate-300","children":[["$","span",null,{"className":"sr-only","children":"Navigation"}],["$","svg",null,{"width":"24","height":"24","fill":"none","aria-hidden":"true","children":["$","path",null,{"d":"M12 6v.01M12 12v.01M12 18v.01M12 7a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm0 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Zm0 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z","stroke":"currentColor","strokeWidth":"1.5","strokeLinecap":"round","strokeLinejoin":"round"}]}]]}]}]]}]}]}]}],["$","$L9",null,{"showSpinner":false}],["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}],["$","footer",null,{"className":"text-slate-700 dark:text-slate-200 py-6 px-16 font-sans tracking-wide mt-6","children":["$","p",null,{"className":"text-[15px] leading-loose text-center","children":"© perov.dev. All rights reserved."}]}]]}]}]}]],null],null],["$La",null]]]]
b:T4f46,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">import</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useState</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useCallback</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">from</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">react</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">import</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">./styles.css</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--identifier" style="color: var(--sh-identifier)">type</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">UseToogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">boolean</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">void</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useToogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">UseToogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useState</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">false</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useCallback</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">!</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">export</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">default</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">function</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">App</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useToogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--entity" style="color: var(--sh-entity)">dialog</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">open</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">className</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">Modal</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span></span>
<span class="sh__line"><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)">        Модальное окно</span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span></span>
<span class="sh__line"><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)">      </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;/</span><span class="sh__token--entity" style="color: var(--sh-entity)">dialog</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--entity" style="color: var(--sh-entity)">div</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">className</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">app</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">onClick</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span></span>
<span class="sh__line"><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)">        </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;</span><span class="sh__token--entity" style="color: var(--sh-entity)">button</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">onClick</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--property" style="color: var(--sh-property)">className</span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--string" style="color: var(--sh-string)">PopupButton</span><span class="sh__token--string" style="color: var(--sh-string)">&quot;</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span></span>
<span class="sh__line"><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)">          Открыть модальное окно</span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span></span>
<span class="sh__line"><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)"></span><span class="sh__token--jsxliterals" style="color: var(--sh-jsxliterals)">        </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;/</span><span class="sh__token--entity" style="color: var(--sh-entity)">button</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">      </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;/</span><span class="sh__token--entity" style="color: var(--sh-entity)">div</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--sign" style="color: var(--sh-sign)">&lt;/</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>c:T1943,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useToogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">UseToogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useState</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">false</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useCallback</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">!</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>d:T1943,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useToogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">UseToogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useState</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">false</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useCallback</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">!</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>e:T1943,<span class="sh__line"><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useToogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">:</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--class" style="color: var(--sh-class)">UseToogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useState</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--keyword" style="color: var(--sh-keyword)">false</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">const</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">useCallback</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">=</span><span class="sh__token--sign" style="color: var(--sh-sign)">&gt;</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">{</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">    </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogleRaw</span><span class="sh__token--sign" style="color: var(--sh-sign)">(</span><span class="sh__token--sign" style="color: var(--sh-sign)">!</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">)</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--space" style="color: var(--sh-space)">  </span><span class="sh__token--keyword" style="color: var(--sh-keyword)">return</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--sign" style="color: var(--sh-sign)">[</span><span class="sh__token--identifier" style="color: var(--sh-identifier)">isOn</span><span class="sh__token--sign" style="color: var(--sh-sign)">,</span><span class="sh__token--space" style="color: var(--sh-space)"> </span><span class="sh__token--identifier" style="color: var(--sh-identifier)">toogle</span><span class="sh__token--sign" style="color: var(--sh-sign)">]</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--sign" style="color: var(--sh-sign)">}</span><span class="sh__token--sign" style="color: var(--sh-sign)">;</span><span class="sh__token--break" style="color: var(--sh-break)"></span></span>
<span class="sh__line"><span class="sh__token--break" style="color: var(--sh-break)"></span></span>2:[["$","p",null,{"children":"Всегда слышал выражение «Java-головного мозга». Так называли программистов, которые из-за длительного использования одного языка или фреймворка (структуры) или библиотеки начинают решать простые задачи сложно и запутанно, потому что они привыкли к определенной плоскости решения проблем, которую диктует этот язык или общепринятые практики на нем."}],"\n",["$","p",null,{"children":"Я всегда думал, что меня это не коснется, но, как оказалось, даже не заметил, как это произошло. Я уже долгое время работаю со стеком React и настолько привык к его поведению, что стал рассматривать проблемы только в рамках того, что предоставляет React, его инструментарий. Просто перестал задумываться о том, что некоторые задачи можно решить более простым способом."}],"\n",["$","p",null,{"children":"Ндеавно мне прислали баг, что пользователи не могут что-то сделать, у них не открывается модальное окно. Хотя код не менялся уже долгое время. Давайте покажу код и ui, чтобы проиллюстрировать проблему. На самом деле, нам не важно, как выглядит само модальное окно, оно может быть любым и содержать что угодно. Важно то, что оно должно открываться и закрываться при нажатии на кнопку и на клик по контейнеру."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Интересно, что пользователи даже не пытались нажать на контейнер. Давайте не будем вдаваться в подробности, почему это так произошло с точки зрения реализации UX. Что это плохая практика вешать один онклик на контейнер и на дочерние элементы. Что если уж онклик и весит зачем-то на диве, то хотя бы роль повесить баттон, иначе сабмитить будет все, что плохо лежит, и т.д., давайте это все опустим."}],"\n"]}],"\n",["$","p",null,{"children":"При клике на контейнер все работает, модальное окно открывается и закрывается, но при клике на кнопку ничего не происходит."}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$b"},"className":"language-ts"}]}],"\n",["$","p",null,{"children":"Важной особенностью является то, что в примере я показываю реализацию хука useToggle, однако на самом деле он просто был импортирован из внешней библиотеки. Версию давно не обновляли. И проблема воспроизводилась только на сервере разработки, где, как выяснилось позже, при сборке проекта пакет обновлялся."}],"\n",["$","p",null,{"children":"Первое, что я подумал - возможно, проблема в том, как реализована useToggle, и это вызывает лишние перерисовки, что приводит к сбросу состояния. Или, наоборот, убирает перерисовки из-за того, что состояние просто не меняется."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Забавно, что меня не смутило то, что при клике на контейнер все работает."}],"\n"]}],"\n",["$","p",null,{"children":"Я начал дебажить состояние и смотреть, что вызывает перерисовки. Выдвигать теории, почему это перестало вдруг работать, хотя основной код приложения не менялся. После того, как посмотрел, что состояние на кнопку не меняется, я полез смотреть реализацию useToggle и обнаружил, что ребята решили оптимизировать useToggle и изменили его немного, чтобы не вызывать лишние перерисовки. И тут я понял, что это и было ошибкой. Раньше компонент перерисовывался на смену состояния, и модальное окно отображалось. Но теперь, после оптимизации, компонент не перерисовывается, и не меняет состояние."}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$c"},"className":"language-ts"}]}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$d"},"className":"language-ts"}]}],"\n",["$","p",null,{"children":"Как забавно происходит, когда долго работаешь с одной технологией и начинаешь мыслить только в ее рамках. Просто пытаешься решить проблему в рамках этой технологии, не подумав никак иначе."}],"\n",["$","p",null,{"children":"Давайте я вам намекну, и вы сразу все поймете."}],"\n",["$","pre",null,{"children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$e"},"className":"language-ts"}]}],"\n",["$","p",null,{"children":"Понимаете, к чему я веду? Простое всплытие событий! Когда событие всплывает из самого глубокого элемента вверх. Самым глубоким элементом в нашем случае является кнопка. Обработчик события сначала срабатывает на кнопке. Потом идет вверх, доходит до контейнера и срабатывает на нем. И мы получаем при клике на кнопку смену состояния на true, при срабатывании на контейнер - false."}],"\n",["$","blockquote",null,{"children":["\n",["$","p",null,{"children":"Забавно, что при дебаге, если посмотреть состояние, в 18-й версии React есть автоматический батчинг состояний, это когда он собирает несколько одинаковых состояний за одну перерисовку. В результате мы увидим последнее измененное состояние, и это будет false, если у вас версия React ниже 18-й, вы увидите сначала смену состояния в true, а потом в false."}],"\n"]}],"\n",["$","p",null,{"children":"Вот такая вот получилась история моего React-головного мозга."}],"\n",["$","p",null,{"children":"Спасибо, что дочитали до конца. Возможно, вы подумаете, что все это было очевидно с самого начала. Я вам скажу - ничего подобного! Я пробовал давать это задание коллегам и друзьям, и все, кто как ни пытался, чтобы починить компонент, навешивали рефы, отслеживали и группировали события и т.д., смотрели перерисовки. И когда они понимали, что проблема во всплытии событий, все улыбались, потому что иногда забываешь очевидные вещи."}],"\n",["$","p",null,{"children":["Бонусом хочу сказать, что из этой истории вылилось небольшое забавное задание. Попросите кого-то из коллег или друзей починить компонент и понаблюдайте, как они это будут делать. ",["$","a",null,{"target":"_blank","rel":"noopener noreferrer","href":"https://codesandbox.io/p/sandbox/practical-mayer-n98l5m","children":"Вот ссылка на компонент"}],". Там две ошибки, одна связана с мемоизацией состояния, другая - со всплытием."]}]]
a:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Реакт головного мозга"}],["$","meta","3",{"name":"description","content":"'Всегда слышал выражение «Java-головного мозга». Так называли"}],["$","meta","4",{"property":"og:title","content":"Реакт головного мозга"}],["$","meta","5",{"property":"og:description","content":"'Всегда слышал выражение «Java-головного мозга». Так называли"}],["$","meta","6",{"property":"og:url","content":"https:/localhost/blog/reactjs-of-brain"}],["$","meta","7",{"property":"og:image","content":"https://localhost/og?title=%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%20%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BC%D0%BE%D0%B7%D0%B3%D0%B0"}],["$","meta","8",{"property":"og:type","content":"article"}],["$","meta","9",{"property":"article:published_time","content":"2024-02-21"}],["$","meta","10",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","11",{"name":"twitter:title","content":"Реакт головного мозга"}],["$","meta","12",{"name":"twitter:description","content":"'Всегда слышал выражение «Java-головного мозга». Так называли"}],["$","meta","13",{"name":"twitter:image","content":"https://localhost/og?title=%D0%A0%D0%B5%D0%B0%D0%BA%D1%82%20%D0%B3%D0%BE%D0%BB%D0%BE%D0%B2%D0%BD%D0%BE%D0%B3%D0%BE%20%D0%BC%D0%BE%D0%B7%D0%B3%D0%B0"}],["$","link","14",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}],["$","link","15",{"rel":"icon","href":"/_next/static/media/favicon.603d046c.ico"}],["$","meta","16",{"name":"next-size-adjust"}]]
1:null
